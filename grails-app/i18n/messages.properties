default.doesnt.match.message=Property [{0}] of class [{1}] with value [{2}] does not match the required pattern [{3}]
default.invalid.url.message=Property [{0}] of class [{1}] with value [{2}] is not a valid URL
default.invalid.creditCard.message=Property [{0}] of class [{1}] with value [{2}] is not a valid credit card number
default.invalid.email.message=Property [{0}] of class [{1}] with value [{2}] is not a valid e-mail address
default.invalid.range.message=Property [{0}] of class [{1}] with value [{2}] does not fall within the valid range from [{3}] to [{4}]
default.invalid.size.message=Property [{0}] of class [{1}] with value [{2}] does not fall within the valid size range from [{3}] to [{4}]
default.invalid.max.message=Property [{0}] of class [{1}] with value [{2}] exceeds maximum value [{3}]
default.invalid.min.message=Property [{0}] of class [{1}] with value [{2}] is less than minimum value [{3}]
default.invalid.max.size.message=Property [{0}] of class [{1}] with value [{2}] exceeds the maximum size of [{3}]
default.invalid.min.size.message=Property [{0}] of class [{1}] with value [{2}] is less than the minimum size of [{3}]
default.invalid.validator.message=Property [{0}] of class [{1}] with value [{2}] does not pass custom validation
default.not.inlist.message=Property [{0}] of class [{1}] with value [{2}] is not contained within the list [{3}]
default.blank.message=The {0} field is required
default.not.equal.message=Property [{0}] of class [{1}] with value [{2}] cannot equal [{3}]
default.null.message=The {0} field is required
default.not.unique.message=Property [{0}] of class [{1}] with value [{2}] must be unique

default.paginate.prev=Previous
default.paginate.next=Next

# Data binding errors. Use "typeMismatch.$className.$propertyName to customize (eg typeMismatch.Book.author)
typeMismatch.java.net.URL=Property {0} must be a valid URL
typeMismatch.java.net.URI=Property {0} must be a valid URI
typeMismatch.java.util.Date=Property {0} must be a valid Date
typeMismatch.java.lang.Double=Property {0} must be a double number
typeMismatch.java.lang.Integer=Property {0} must be a integer number
typeMismatch.java.lang.Long=Property {0} must be a valid number
typeMismatch.java.lang.Short=Property {0} must be a valid number
typeMismatch.java.math.BigDecimal=Property {0} must be a valid number
typeMismatch.java.math.BigInteger=Property {0} must be a valid number

#security group
securityCreateCommand.name.matches.error=Name should have the format [a-zA-Z_0-9]
ruleAddCommand.fromPort.matches.error=From port/Type should have numeric value
ruleAddCommand.toPort.matches.error=To port/Code should have numeric value

#instance
instanceCreateCommand.name.matches.error=Name should have the format [a-zA-Z_0-9-]
instanceCreateCommand.name.validator=Name should be unique
instanceCreateCommand.count.matches.error=Count should have numeric value
instanceCreateCommand.count.validator.range=Count should be in the range from {3} to {4}
instanceCreateCommand.count.validator.maxvalue=Max value of instance count should not exceed {3}
instanceCreateCommand.count.validator.minvalue=Instance count should be at least {3}
instanceCreateCommand.image.validator=The image field is required
instanceCreateCommand.networks.validator=The networks field is required
instanceCreateCommand.snapshot.validator=The snapshot field is required
inputNameCommand.name.matches.error=Name should have the format [a-zA-Z_0-9-]

#flavor
flavorCreateCommand.name.matches.error=Name should have the format [a-zA-Z_0-9]
flavorCreateCommand.ram.matches.error=Ram should have numeric value
flavorCreateCommand.ram.validator.maxvalue=Only {3} MB of memory is available
flavorCreateCommand.ram.validator.minvalue=Memory size should be at least {3}
flavorCreateCommand.disk.matches.error=Disk should have numeric value
flavorCreateCommand.disk.validator.maxvalue=Only {3} GB of disk is available
flavorCreateCommand.disk.validator.minvalue=Disk size should be at least {3}
flavorCreateCommand.vcpus.matches.error=Vcpus should have numeric value
flavorCreateCommand.vcpus.validator.maxvalue=Only {3} vcpu is available
flavorCreateCommand.vcpus.validator.minvalue=Number of vcpus should be at least {3}
flavorCreateCommand.ephemeral.matches.error=Ephemeral should have numeric value
flavorCreateCommand.swap.matches.error=Swap should have numeric value
flavorCreateCommand.rxtxFactor.matches.error=RxtxFactor should have numeric value

#keypair
keypairCreateCommand.name.matches.error=Name should have the format [a-zA-Z0-9_-]
keypairInsertCommand.name.matches.error=Name should have the format [a-zA-Z0-9_-]
keypairInsertCommand.publicKey.matches.error=Public key should have the format ssh-rsa AAAA[0-9A-Za-z+\/]+[=]'{'0,3'}'(.)*
keypairInsertCommand.name.exists=Keypair with name {2} already exists
keypairCreateCommand.name.exists=Keypair with name {2} already exists

#tenant
tenantValidationCommand.name.matches.error=Name should have the format [a-zA-Z_0-9]

#lbaas
serviceCreateCommand.name.matches.error=Name should have the format [a-zA-Z_0-9]
serviceCreateCommand.name.validator.error=Name should ends with [:port]
serviceCreateCommand.port.matches.error=Port should have numeric value
serviceCreateCommand.weight.matches.error=Weight should have numeric value
poolCreateCommand.name.matches.error=Name should have the format [a-zA-Z_0-9]
poolCreateCommand.port.matches.error=Port should have numeric value
vipValidationCommand.ip.matches.error=Ip should have V4 format
vipValidationCommand.port.matches.error=Port should have numeric value
vipValidationCommand.port.validator.minvalue=Port should be at least {3}
vipValidationCommand.port.validator.maxvalue=Port should not exceed {3}
policyValidationCommand.name.exists=Policy with name {2} already exists
policyValidationCommand.name.matches.error=Name should have the format [a-zA-Z0-9_-]

#user
openStackUserUpdateCommand.tenant_id.notEqual.error=Field Project is required
openStackUserUpdateCommand.email.matches.error=Enter a valid email
openStackUserCreateCommand.email.matches.error=Enter a valid email
openStackUserUpdateCommand.name.matches.error=Name can contains only symbols [A-Za-z0-9_]
openStackUserCreateCommand.name.matches.error=Name can contains only symbols [A-Za-z0-9_]
openStackUserCommand.password.confirm.error=Passwords not equals

#image
imageCreationCommand.location.url.error = Image Location must be a valid URL
imageCreationCommand.name.validator=Name should be unique
imageValidationCommand.name.matches.error=Name should have the format [a-zA-Z_0-9-]

#volume
volumeCreateCommand.name.validator=Name should be unique
volumeCreateCommand.size.validator.minvalue=Volume size should be at least {3}
volumeCreateCommand.size.validator.maxvalue=Volume size should not exceed {3}

#network
associateIpValidateCommand.hostname.alreadyUsed=Hostname {2} is already used in zone {3}
